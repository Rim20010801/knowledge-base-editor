
## PROJECT OVERVIEW
This project aims to create a simple, yet functional article editor. The editor will allow users to create and edit articles, saving them as JSON and rendering them as HTML.  The project prioritizes a minimal and highly functional design, aiming for maximum efficiency with minimal code. The design emphasizes intuitive user experience and robust error handling. The project is designed for ease of extension with features such as markdown support and real-time collaboration planned for future development.  The project utilizes a modular design, separating concerns into distinct modules for easier maintenance and extension. Robust error handling and input sanitization are implemented throughout the application to prevent vulnerabilities and ensure a smooth user experience. A debounce function is used to optimize auto-save functionality, preventing excessive storage writes. The project implements a clear and well-defined release process, including versioning and deployment steps. The project is designed to be used offline. Article data is stored in the browser's localStorage and IndexDB, and can be exported and imported as JSON files. Analysis of the `archive` folder revealed previous iterations of the project, including various configuration files, documentation, and code examples. This information provides valuable context for understanding the project's evolution and current state. The project now includes a real-time search functionality. A new `knowledge-base` directory has been created to house the core application code. The project will utilize a two-hour sprint development workflow. The project will utilize a real-time search system that displays results as the user types, applying a debounce function to prevent unnecessary searches and utilizing the IndexDB for speed. The search will support both title and full-text search, displaying results in order of relevance. The project now includes a speech synthesis feature (added 2025-04-05). The project now supports full-text search of article titles, categories, tags, and component content (added 2025-04-05). The project will implement a minimal locking mechanism to prevent concurrent edits of the same article. Articles will be exported as JSON files upon creation and updated automatically. The project will utilize a minimal UI/UX design, focusing on core functionality and ease of use. The project data structure will be minimal and efficient, focusing on core content elements. (2025-04-05) The project is designed for offline use, utilizing IndexDB for persistent storage and localStorage for temporary data. A simple locking mechanism prevents concurrent edits of the same article. Articles are exported as JSON upon creation and updated automatically. The UI/UX emphasizes simplicity and ease of use. (2025-04-05) A user request on 2025-04-05 suggested creating a single HTML file with JavaScript and HTML only, under 1500 lines, focusing on essential features.  This was initially implemented (2025-04-05) resulting in the creation of `knowledge-base-app.html`. However, subsequent discussions (2025-04-05) explored alternative approaches with multiple files. The estimated project size is now considered to be in the range of 700-2000 lines of code depending on feature set. (2025-04-05).  Discussions on 2025-04-05 estimated project size at 700-2000 lines depending on feature set and whether a single or multi-file approach is used. (2025-04-05)  The project's estimated size ranges from 700-2000 lines of code, depending on the chosen feature set and whether a single-file or multi-file approach is used. (2025-04-05)  The project's estimated size, considering minimal features and including full-text search, is approximately 800-1000 lines of code. (2025-04-05)  A discussion on 2025-04-05 explored a simpler, single-page editor design with minimal features. This design prioritizes ease of use and maintainability (2025-04-05). A discussion on 2025-04-05 explored a simpler editor design using a horizontal list of content blocks for editing, aiming for a single-page layout without scrolling. (2025-04-05)  The target code size for a minimal implementation is estimated at 200-350 lines, potentially reducible to 200-250 lines through further simplification. (2025-04-05) A simpler, single-page editor design with minimal features was discussed on 2025-04-05, prioritizing ease of use and maintainability. A simpler design using a horizontal list of content blocks for editing, aiming for a single-page layout without scrolling, was also discussed on 2025-04-05.  The target code size for a minimal implementation is estimated at 200-350 lines, potentially reducible to 200-250 lines through further simplification.  The final design will utilize a horizontal list for content block editing on a single page without scrolling. The target code size for a minimal implementation is 200-350 lines, potentially reducible to 200-250 lines.  List design updated 2025-04-05.  Article title and header styling updated 2025-04-05.  List styling updated 2025-04-05.  Numbered list styling updated 2025-04-05. Bulleted list styling updated 2025-04-05. Article title and header styling updated 2025-04-05. Offline-only functionality added 2025-04-05. Image display removed 2025-04-05. All image displays are removed (2025-04-05).  The application will be offline only (2025-04-05).  The project includes files `editor.html` and `search.js` (2025-04-05).  The `Main/js/editor.js` file is used by the editor (2025-04-05).  The project now utilizes `editor.html` and `Main/js/editor.js` (2025-04-05).  List styling, article title and header styling updated 2025-04-05. A JSON to HTML conversion function has been identified in `article-editor/js/converter.js` and its usage within `Main/js/editor.js` (2025-04-05).  A detailed JSON to HTML conversion process is documented in `Main/json-to-html-conversion-rules.md` (2025-04-05). The conversion process utilizes HTML tags for styling, avoiding CSS. (2025-04-05)  A detailed JSON to HTML conversion process is documented in `Main/json-to-html-conversion-rules.md` (2025-04-05). The conversion process uses only HTML tags for styling, avoiding CSS. (2025-04-05)  A detailed JSON to HTML conversion process is documented in `Main/json-to-html-conversion-rules.md` (2025-04-05). A JSON to HTML conversion function is implemented in `article-editor/js/converter.js` and used in `Main/js/editor.js`.  The conversion process is documented in `Main/json-to-html-conversion-rules.md` (2025-04-05).  Inline CSS will be used for styling. (2025-04-05).  Support for markdown-like inline formatting will be implemented using the following syntax: `**bold**`, `` `code` ``, `_italic_`, `~strikethrough~`, `==blue==`, `!!red!!`, `@@green@@`, `++highlight++`, `__underline__`, `^large^`, `~small~`. (2025-04-05).  The JSON to HTML conversion process is further detailed in `Main/json-to-html-conversion-rules.md` (2025-04-05).  The project now includes a comprehensive markdown file detailing the JSON to HTML conversion process (`Main/json-to-html-conversion-rules.md`) (2025-04-05).  A detailed JSON to HTML conversion process is documented in `Main/json-to-html-conversion-rules.md` (2025-04-05).  The project now uses `Main/json-to-html-conversion-rules.md` (2025-04-05) for JSON to HTML conversion rules.  The project now supports image blocks with alignment options (left, right, center) added 2025-04-05.  The `width` and `height` parameters for image blocks can accept either numerical values (interpreted as pixels) or strings (interpreted as CSS values). (2025-04-05) The project now supports image blocks, with width and height parameters accepting numerical values (pixels) or strings (CSS values).  Image alignment options (left, right, center) are supported. (2025-04-05)  The next steps involve prioritizing features such as completing core editor functionality (including schema integration), adding preview functionality, integrating with IndexDB, and implementing the search functionality. (2025-04-05)
The following JavaScript features are yet to be implemented (2025-04-05): Module interoperability (importing schema.js and utilizing converter.js in editor.js), persistent data storage (IndexDB integration, currently only using LocalStorage and JSON export), full-text and title search functionality, article preview functionality, list block addition and editing, a locking mechanism to prevent concurrent edits, and support for markdown-like inline formatting.  Further steps include implementing the remaining JavaScript features: module interoperability, persistent data storage using IndexDB, full-text and title search, article preview, list block editing, a locking mechanism, and markdown-like inline formatting (2025-04-05).  The next steps include implementing article loading from URL,  article listing, and tag management. (2025-04-05)  The next steps involve prioritizing features such as completing core editor functionality (including schema integration), adding preview functionality, integrating with IndexDB, and implementing the search functionality. (2025-04-05)  The JavaScript features yet to be implemented include: module interoperability, persistent data storage (IndexDB integration), full-text and title search, article preview, list block editing, a locking mechanism, and markdown-like inline formatting. (2025-04-05)  The next steps include implementing article loading from URL, article listing, and tag management. (2025-04-05)  A discussion on 2025-04-05 regarding next steps included implementing core editor functionality, preview functionality, IndexDB integration, and search functionality. (2025-04-05)  A discussion on 2025-04-05 regarding next steps included implementing article loading from URL, article listing, and tag management. (2025-04-05)  Functional tests were conducted on 2025-04-05. (2025-04-05)  A search interface and article listing functionality were identified as the next priorities. (2025-04-05)  Functional tests were performed on 2025-04-05, revealing the need for improved error handling and further testing. (2025-04-05)  A debugging function, `EditorTest.runTests()`, was added to `Main/js/editor.js` to facilitate testing. (2025-04-05)  Article listing and search interface are now prioritized features. (2025-04-05)  A debugging function, `EditorTest.runTests()`, was added to `Main/js/editor.js` to facilitate testing. (2025-04-05)  The project now includes functionality for creating new articles and loading existing articles from the database. (2025-04-05) The project now includes tag management functionality. (2025-04-05)  The project now includes a complete article listing feature, allowing users to view, edit, and delete existing articles. (2025-04-05)  The project now includes a complete search interface, allowing users to search articles by title and full text. (2025-04-05)  A namespaced approach (`KB`) is now used for global variables to improve organization and reduce naming conflicts. (2025-04-05)  The project now includes an `articles.html` page for article listing and search. (2025-04-05)  The application will use URL parameters to pass article IDs between the editor and article list pages (2025-04-05).  The project will utilize a three-file structure: `index.html`, `editor.html`, and `common.js` (2025-04-05).  The project now uses a three-file structure: `index.html`, `editor.html`, `common.js` (2025-04-05).  A new `articles.html` file has been created for article listing and search. (2025-04-05)  The project now includes a debugging function, `EditorTest.runTests()`, in `Main/js/editor.js` to aid in testing. (2025-04-05)  The project now uses a three-file structure: `index.html`, `articles.html`, and `common.js` (2025-04-05).  The project now utilizes a three-file structure: `index.html`, `articles.html`, and `common.js` (2025-04-05). The project now uses a three-file structure: index.html, articles.html, and common.js (2025-04-05).  Each article will be stored as a separate JSON file. (2025-04-05).  The project now supports importing articles from JSON files. (2025-04-05).  The project now supports importing articles from JSON files, either via URL or by directly uploading a file. (2025-04-05).  The project now includes functionality for importing articles from JSON files located in a specified directory. (2025-04-05). The project now uses a three-file structure: index.html, articles.html, and common.js (2025-04-05).  The project now utilizes a three-file structure: index.html, articles.html, and common.js (2025-04-05). The application will automatically update upon opening. (2025-04-05)  The application will automatically update upon opening (2025-04-05).  The application will automatically update upon opening, using a file selection dialog to choose the directory containing JSON files. (2025-04-05)  The application will automatically update upon opening, using a file selection dialog to choose the directory containing JSON files. (2025-04-05)  A new `storage.js` file has been added to manage storage and automatic updates (2025-04-05).  The application will automatically update upon opening, using a file selection dialog to choose the directory containing the JSON files. (2025-04-05)  The application will automatically update upon opening, using a file selection dialog to choose the directory containing the JSON files. (2025-04-05)  The application will automatically update upon opening, using a file selection dialog to choose the directory containing JSON files. (2025-04-05)  The application will automatically update upon opening, using a file selection dialog to choose the directory containing JSON files. (2025-04-05)
The application will now automatically update upon opening using a file selection dialog to choose the directory containing JSON files. (2025-04-05) A new `storage.js` file has been added to handle automatic updates. (2025-04-05)


## 全て日本語
このプロジェクトは、シンプルながらも機能的な記事エディタを作成することを目的としています。エディタを使用することで、ユーザーは記事を作成・編集し、JSONとして保存した後、HTMLとしてレンダリングすることができます。コードの冗長性を可能な限り排除し、必要な機能をコンパクトに実装することに重点を置いています。直感的なユーザーエクスペリエンスと堅牢なエラー処理を重視した設計となっています。将来的な拡張として、マークダウン対応やリアルタイムコラボレーション機能の追加も計画されています。プロジェクトはモジュール設計を採用し、機能を個別のモジュールに分割することで保守性と拡張性を向上させています。堅牢なエラー処理と入力サニタイズ処理をアプリケーション全体に実装し、脆弱性を防ぎ、スムーズなユーザーエクスペリエンスを確保しています。自動保存機能の最適化にはデバウンス関数が使用されており、ストレージへの書き込み回数を削減しています。バージョン管理にはGitを使用し、頻繁なコミットと明確なコミットメッセージが推奨されます。リリースプロセスは明確に定義され、バージョン管理とデプロイ手順が含まれます。このプロジェクトはオフラインで使用できるように設計されています。記事データはブラウザのローカルストレージとIndexDBに保存され、JSONファイルとしてエクスポートおよびインポートできます。`archive`フォルダの分析により、以前のプロジェクトのバージョン、様々な設定ファイル、ドキュメント、コード例などが明らかになりました。この情報は、プロジェクトの進化と現在の状態を理解するための貴重なコンテキストを提供します。プロジェクトにはリアルタイム検索機能が追加されました。新しい`knowledge-base`ディレクトリが作成され、コアアプリケーションコードを格納するようになりました。2時間のスプリント開発ワークフローが採用されています。ユーザーが入力した直後から検索結果が表示され、タイピング中にデバウンス処理を適用して不必要な検索処理を減らし、IndexDBに保存されたデータをベースに検索を行い、高速なレスポンスを実現します。タイトル検索と全文検索を切り替えられ、検索結果は関連度順に表示され、クリックで該当記事にすぐにアクセスできます。2025年4月5日には読み上げ機能が追加されました。ユーザーが検索ボックスに入力した直後から検索結果が表示されます。タイピング中にデバウンス処理を適用して不必要な検索処理を減らします。IndexDBに保存されたデータをベースに検索を行い、高速なレスポンスを実現します。タイトル検索と全文検索を切り替えられます。検索結果は関連度順に表示し、クリックで該当記事にすぐにアクセスできます。(2025-04-05に追加)。記事のタイトル、カテゴリ、タグ、コンポーネントの内容に対する全文検索がサポートされるようになりました。(2025-04-05に追加)  最小限のロック機能を実装し、同一記事への同時編集を防止します。記事は作成時にJSONファイルとしてエクスポートされ、自動的に更新されます。UI/UXは最小限にシンプルさを保ち、コア機能と使いやすさに重点を置きます。(2025-04-05) データ構造は最小限かつ効率的に設計され、コアコンテンツ要素に焦点を当てます。(2025-04-05)  オフラインでの使用を想定し、IndexDBを永続ストレージ、localStorageを一時データとして利用します。シンプルなロック機構により、同一記事への同時編集を防止します。記事は作成時にJSONとしてエクスポートされ、自動的に更新されます。UI/UXはシンプルさと使いやすさを重視します。(2025-04-05) 2025年4月5日のユーザーからのリクエストでは、JavaScriptとHTMLのみを使用した1500行以内の単一HTMLファイルの作成が提案されました。このリクエストは`knowledge-base-app.html`として実装されました(2025-04-05)。しかし、その後の議論で複数ファイル構成も検討されました。(2025-04-05)このファイルは、コアアプリケーションロジックとUIを含み、プロジェクト構造に大きな変更をもたらします。モジュール設計は単一ファイル内で大部分維持されていますが、さらなる調整が必要となる可能性があります。プロジェクトの規模は、機能によって700～2000行と推定されます。(2025-04-05)  2025年4月5日の議論では、機能とファイル構成（単一ファイルか複数ファイルか）によって、プロジェクト規模は700～2000行と推定されました。(2025-04-05) プロジェクト規模は、機能の範囲と、単一ファイルまたは複数ファイルのアプローチのいずれを採用するかによって、700～2000行と推定されています。(2025-04-05) 最小限の機能で全文検索を含めた場合、約800～1000行と推定されます。(2025-04-05) 2025年4月5日の議論では、よりシンプルで、最小限の機能を持つ単一ページのエディタ設計が検討されました。この設計は、使いやすさと保守性を優先しています。(2025-04-05)  2025年4月05日の議論では、スクロールなしで1ページに収まるよう、横長のリスト形式でコンテンツブロックを編集するシンプルなエディタ設計が検討されました。(2025-04-05) 最小限の機能実装では、約200～350行のコード量を見込んでおり、さらに簡略化することで200～250行まで削減できる可能性があります。(2025-04-05)  2025年4月5日の議論では、よりシンプルで最小限の機能を持つ単一ページのエディタ設計が検討されました。この設計は使いやすさと保守性を優先しています。また、スクロールなしで1ページに収まるよう、横長のリスト形式でコンテンツブロックを編集するシンプルなエディタ設計も検討されました。最小限の機能実装では、約200～350行のコード量を見込んでおり、さらに簡略化することで200～250行まで削減できる可能性があります。The final design will utilize a horizontal list for content block editing, aiming for a single-page layout without scrolling. The target code size is 200-350 lines, potentially reducible to 200-250 lines. リストデザインは2025年4月5日に更新されました。記事タイトルとヘッダーのデザインは2025年4月5日に更新されました。リストのデザイン、特に番号付きリストと箇条書きリストのデザインが2025年4月5日に更新されました。(2025-04-05) オフライン専用機能が追加されました。(2025-04-05) The application will be offline only (2025-04-05).  プロジェクトには`editor.html`と`search.js`ファイルが含まれています。(2025-04-05) エディターは`Main/js/editor.js`ファイルを使用します。(2025-04-05)  プロジェクトは現在`editor.html`と`Main/js/editor.js`を使用しています。(2025-04-05) リストスタイル、記事タイトルとヘッダーのスタイルが2025年4月5日に更新されました。`article-editor/js/converter.js`ファイルでJSONからHTMLへの変換処理が実装されており、`Main/js/editor.js`で使用されていることが確認されました。(2025-04-05) JSONからHTMLへの変換プロセスは、`Main/json-to-html-conversion-rules.md`に詳細に記述されています。(2025-04-05) 変換プロセスではCSSを使用せず、HTMLタグのみを使用してスタイリングを行います。(2025-04-05)  A detailed JSON to HTML conversion process is documented in `Main/json-to-html-conversion-rules.md` (2025-04-05).  JSONからHTMLへの変換処理は`article-editor/js/converter.js`に実装され、`Main/js/editor.js`で使用されています。(2025-04-05) 変換プロセスは`Main/json-to-html-conversion-rules.md`に記述されています。(2025-04-05) インラインCSSを使用してスタイリングを行います。(2025-04-05)  以下のマークダウン風のインラインフォーマットをサポートします：`**太字**`, `` `コード` ``, `_斜体_`, `~取り消し線~`, `==青色==`, `!!赤色!!`, `@@緑色@@`, `++ハイライト++`, `__下線__`, `^大文字^`, `~小文字~` (2025-04-05)  JSONからHTMLへの変換プロセスは、`Main/json-to-html-conversion-rules.md`にも詳細に記載されています。(2025-04-05)  プロジェクトには、JSONからHTMLへの変換プロセスを詳細に説明した包括的なマークダウンファイル(`Main/json-to-html-conversion-rules.md`)が含まれています。(2025-04-05)  プロジェクトは`Main/json-to-html-conversion-rules.md` (2025-04-05) をJSONからHTMLへの変換ルールに使用しています。プロジェクトは、2025年4月5日に追加された画像ブロックの配置オプション（左、右、中央）をサポートします。(2025-04-05) 画像ブロックの`width`と`height`パラメータには、数値（ピクセルとして解釈）または文字列（CSS値として解釈）のいずれかを指定できます。(2025-04-05) プロジェクトは画像ブロックをサポートし、幅と高さのパラメータには数値（ピクセル）または文字列（CSS値）を指定できます。画像の配置オプション（左、右、中央）もサポートします。(2025-04-05) 次のステップは、スキーマの統合などのエディタの基本機能の完成、プレビュー機能の追加、IndexDBとの連携、検索機能の実装といった機能の優先順位付けです。(2025-04-05)
2025年4月5日の議論では、JavaScriptで以下の機能が未実装であることが確認されました。（モジュール間の連携、データ永続化、検索機能、記事プレビュー、リスト機能、複数PC対応、インライン書式）。URLからの記事読み込み、記事一覧表示、タグ管理機能も追加する必要があります。(2025-04-05)  2025年4月5日に行われた議論では、次のステップとして、コアエディタ機能（スキーマ統合を含む）、プレビュー機能、IndexDBとの統合、検索機能の実装を優先することが提案されました。(2025-04-05) 2025年4月5日に行われた議論では、次のステップとして、URLからの記事読み込み、記事一覧表示、タグ管理機能の実装が提案されました。(2025-04-05) 2025年4月5日、機能テストが実施されました。(2025-04-05)  検索インターフェースと記事一覧表示機能が次の優先事項として特定されました。(2025-04-05) 2025年4月5日に行われた機能テストでは、エラー処理の改善とさらなるテストが必要であることが明らかになりました。(2025-04-05) テストを容易にするため、`Main/js/editor.js`に`EditorTest.runTests()`というデバッグ関数が追加されました。(2025-04-05)  記事一覧表示機能と検索インターフェースが優先事項として設定されました。(2025-04-05) 新規記事の作成とデータベースからの既存記事の読み込み機能が実装されました。(2025-04-05) タグ管理機能が実装されました。(2025-04-05)  記事一覧表示機能が実装されました。(2025-04-05) 検索インターフェースが実装されました。(2025-04-05)  グローバル変数の名前空間化（KB）が実装されました。(2025-04-05)  記事一覧と検索のための`articles.html`ページが追加されました。(2025-04-05) エディタと記事一覧ページ間で記事IDを渡すためにURLパラメータを使用します。(2025-04-05)  プロジェクトは3つのファイル構造を使用します：`index.html`, `editor.html`, `common.js` (2025-04-05) 各記事は個別のJSONファイルとして保存されます。(2025-04-05) プロジェクトでは、URLまたはファイルの直接アップロードのいずれかによって、JSONファイルから記事をインポートできるようになりました。(2025-04-05) プロジェクトでは、指定されたディレクトリにあるJSONファイルから記事をインポートする機能が追加されました。(2025-04-05)  The application will automatically update upon opening. (2025-04-05) アプリケーションは開くと自動的に更新されます (2025-04-05). アプリケーションは開くと、ファイル選択ダイアログが表示され、JSONファイルを含むディレクトリを選択することで自動更新されます。(2025-04-05) アプリケーションは開くと自動的に更新されます。(2025-04-05) アプリケーションは開くと自動的に更新され、ファイル選択ダイアログを使用してJSONファイルを含むディレクトリを選択できます。(2025-04-05)  アプリケーションは開くと自動更新し、ファイル選択ダイアログからJSONファイルのディレクトリを選択できます。(2025-04-05)


## CODE STYLE
- Follow standard JavaScript coding conventions (e.g., consistent indentation, meaningful variable names).
- Keep functions small and focused (ideally under 15 lines).
- Minimize nesting levels (aim for 3 levels or less).
- Prioritize self-documenting code over extensive comments.
- Use template literals for efficient HTML generation.
- Implement robust error handling using try/catch blocks and user-friendly error messages.
- Implement input sanitization to prevent XSS vulnerabilities.
- Implement debounce function for auto-save and search functionality.
- Use modular design to encapsulate related functionality.
- Utilize event-driven architecture to separate UI events from state changes.
- Implement consistent and clear naming conventions for variables and functions.
- Limit file size to under 500 lines of code.  This has been relaxed to accommodate the single-file application and multiple file approaches (2025-04-05).  The target size range is 700-2000 lines. (2025-04-05)  The target code size is estimated at 200-350 lines of code for a minimal implementation, potentially reducible to 200-250 lines by further simplification. (2025-04-05)
- Maintain a consistent and readable code style throughout the project.  (2025-04-05)
- Use clear and concise variable and function names.  (2025-04-05)
- Minimize the use of nested conditional statements and loops. (2025-04-05)
- Inline CSS will be used for HTML styling. (2025-04-05)
- Optimized module loading: Direct inclusion of `schema.js`, `converter.js`, and `database.js` in `editor.html` (2025-04-05).
- Prioritize clear and concise code with minimal nesting. (2025-04-05)
- Improved error handling and dependency management in `editor.js` (2025-04-05).
- Utilize a namespaced approach for global variables to improve organization and reduce naming conflicts. (2025-04-05)
- Use a namespaced approach (`KB`) for global variables. (2025-04-05)
- All JavaScript modules will utilize the `KB` namespace. (2025-04-05)
- Utilize a consistent naming convention across all JavaScript files, using the `KB` namespace (2025-04-05)
- Use a consistent and descriptive naming convention for variables, functions, and files. (2025-04-05)
- Utilize a consistent naming convention across all JavaScript files, using the `KB` namespace (2025-04-05).
- All global variables will be namespaced under `KB` to prevent naming conflicts. (2025-04-05)


## FOLDER ORGANIZATION
- `/knowledge-base`: Contains the core article editor code. The project structure has been reorganized (2025-04-05) to reflect the new design.  The organization may be further refined to support either a single-file or multi-file approach. (2025-04-05) The folder structure should be kept simple and intuitive. (2025-04-05) The project follows a modular structure, separating concerns into distinct modules for easier maintenance and scalability. (2025-04-05)  The primary functionality will be contained within a single HTML file (`editor.html`), including all JavaScript and HTML. (2025-04-05).  The `Main` directory contains the `js/editor.js` file (2025-04-05).  The `Main` directory also contains `json-to-html-conversion-rules.md` (2025-04-05).  The `Main` directory now contains `json-to-html-conversion-rules.md`, a markdown file detailing the JSON to HTML conversion rules. (2025-04-05)  The `Main` directory contains core JavaScript files, including `editor.js`, `schema.js`, and `converter.js`. (2025-04-05) The `Main/js` directory contains core JavaScript files: `editor.js`, `schema.js`, `converter.js`, `search.js`, `indexer.js`, `debounce.js`, `jsonHelper.js`, and `database.js`. (2025-04-05)  The `Main` directory contains `schema.js`, `converter.js`, and `editor.js` (2025-04-05).
- `/article-editor`: Contains the core article editor code (index.html, js/, css/, data/). This directory is now largely superseded by `/knowledge-base` and may be removed in future versions. (2025-04-05)
- `/archive`: Contains previous project files, organized into subfolders:
    - `/archive/git_and_configs`: Contains .git, .cursor, and .specstory folders.
    - `/archive/old_config`: Contains old configuration files.
    - `/archive/old_config_files`: Contains old configuration files (e.g., ESLint, Stylelint).
    - `/archive/old_docs`: Contains old documentation files and HTML files.
    - `/archive/old_files`: Contains old project files, including `backup`, `css`, `js`, `lib`, `node_modules`, `rebuild`, `samples`, `src`, and `styles` subfolders.
    - `/archive/reference_files`: Contains HTML, CSS, JS, and MD files for reference.
- `/articles.html`: Contains the article